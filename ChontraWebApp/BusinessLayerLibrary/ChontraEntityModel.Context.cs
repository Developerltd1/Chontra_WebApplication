//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessLayerLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChontraEntityModel : DbContext
    {
        public ChontraEntityModel()
            : base("name=ChontraEntityModel")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<Membership_Rolepages> Membership_Rolepages { get; set; }
        public virtual DbSet<Membership_RoleUsers> Membership_RoleUsers { get; set; }
        public virtual DbSet<Membership_Webpages> Membership_Webpages { get; set; }
        public virtual DbSet<Membership_Webpageurls> Membership_Webpageurls { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Stage> Stages { get; set; }
        public virtual DbSet<Decoration> Decorations { get; set; }
        public virtual DbSet<ServicesPicture> ServicesPictures { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventGallery> EventGalleries { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Membership_Users> Membership_Users { get; set; }
        public virtual DbSet<SubMenu> SubMenus { get; set; }
        public virtual DbSet<Slider> Sliders { get; set; }
        public virtual DbSet<PriceMenu> PriceMenus { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<EventTiming> EventTimings { get; set; }
    
        public virtual ObjectResult<GetSideMenusByRoleID_Result> GetSideMenusByRoleID(Nullable<int> in_RoleID)
        {
            var in_RoleIDParameter = in_RoleID.HasValue ?
                new ObjectParameter("in_RoleID", in_RoleID) :
                new ObjectParameter("in_RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSideMenusByRoleID_Result>("GetSideMenusByRoleID", in_RoleIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> membership_AddRole(ObjectParameter roleID, string roleName, Nullable<int> createdBy)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("membership_AddRole", roleID, roleNameParameter, createdByParameter);
        }
    
        public virtual int membership_AddRolePages(Nullable<int> roleID, Nullable<int> webPage_ID, Nullable<bool> hasInsert, Nullable<bool> hasUpdate, Nullable<bool> hasDelete)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var webPage_IDParameter = webPage_ID.HasValue ?
                new ObjectParameter("WebPage_ID", webPage_ID) :
                new ObjectParameter("WebPage_ID", typeof(int));
    
            var hasInsertParameter = hasInsert.HasValue ?
                new ObjectParameter("HasInsert", hasInsert) :
                new ObjectParameter("HasInsert", typeof(bool));
    
            var hasUpdateParameter = hasUpdate.HasValue ?
                new ObjectParameter("HasUpdate", hasUpdate) :
                new ObjectParameter("HasUpdate", typeof(bool));
    
            var hasDeleteParameter = hasDelete.HasValue ?
                new ObjectParameter("HasDelete", hasDelete) :
                new ObjectParameter("HasDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("membership_AddRolePages", roleIDParameter, webPage_IDParameter, hasInsertParameter, hasUpdateParameter, hasDeleteParameter);
        }
    
        public virtual ObjectResult<membership_AuthenticateUser_Result> membership_AuthenticateUser(string in_UserName, string in_Password, ObjectParameter p_Status, ObjectParameter p_StatusDetails)
        {
            var in_UserNameParameter = in_UserName != null ?
                new ObjectParameter("in_UserName", in_UserName) :
                new ObjectParameter("in_UserName", typeof(string));
    
            var in_PasswordParameter = in_Password != null ?
                new ObjectParameter("in_Password", in_Password) :
                new ObjectParameter("in_Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<membership_AuthenticateUser_Result>("membership_AuthenticateUser", in_UserNameParameter, in_PasswordParameter, p_Status, p_StatusDetails);
        }
    
        public virtual ObjectResult<membership_GetAllRoles_Result> membership_GetAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<membership_GetAllRoles_Result>("membership_GetAllRoles");
        }
    
        public virtual ObjectResult<membership_GetRoleByID_Result> membership_GetRoleByID(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<membership_GetRoleByID_Result>("membership_GetRoleByID", roleIDParameter);
        }
    
        public virtual ObjectResult<GeEventByDate_Result> GeEventByDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeEventByDate_Result>("GeEventByDate");
        }
    }
}
